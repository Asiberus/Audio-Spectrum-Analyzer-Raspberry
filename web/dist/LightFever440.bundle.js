/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
window.LightFever440 =
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./js/LightFever440.js":
/*!*****************************!*\
  !*** ./js/LightFever440.js ***!
  \*****************************/
/*! namespace exports */
/*! export default [provided] [used in main] [usage prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LightFever440 = /*#__PURE__*/function () {\n  /** @summary <h1>Light Fever 440 web controller</h1>\r\n   * @author Arthur Beaulieu, RaphaÃ«l Beekmann\r\n   * @since November 2020\r\n   * @description <blockquote>This module is made to abstract the Light Fever 440 script hosted on the Py web server.\r\n   * The localhost is the entrypoint for such controller. All methods described here are made to switch from exposed\r\n   * modes, to set effect in action and to provide options for these efects. This constructor doesn't take any arguments\r\n   * and is made to work standalone, without any external libraries or class. See the <code>README.md</code> file to know\r\n   * how to set up this project on your Raspberry.</blockquote> */\n  function LightFever440() {\n    _classCallCheck(this, LightFever440);\n\n    /*  ---------------------------------------  DOM internal attributes  --------------------------------------------  */\n\n    /** @private\r\n     * @member {object} - All DOM elements used for interaction in the app */\n    this._dom = {\n      title: document.getElementById('title'),\n      version: document.getElementById('version'),\n      toggle: document.getElementById('toggle-light-fever'),\n      manual: document.getElementById('manual-mode'),\n      analyzer: document.getElementById('analyzer-mode'),\n      selection: document.getElementById('selection-border'),\n      manualContainer: document.getElementById('manual-container'),\n      autoContainer: document.getElementById('auto-container'),\n      themeSwitch: document.getElementById('theme-switch'),\n      status: document.getElementById('status-text'),\n      manualButtons: {\n        // Buttons that are only available in manual mode\n        UNIFORM: document.getElementById('manual-uniform'),\n        CHASE: document.getElementById('manual-chase'),\n        RAINBOW: document.getElementById('manual-rainbow'),\n        CHASE_RAINBOW: document.getElementById('manual-chase-rainbow')\n      },\n      manualOptions: {\n        UNIFORM: document.getElementById('manual-uniform-options'),\n        CHASE: document.getElementById('manual-chase-options'),\n        RAINBOW: document.getElementById('manual-rainbow-options'),\n        CHASE_RAINBOW: document.getElementById('manual-chase-rainbow-options')\n      },\n      autoButtons: {\n        // Buttons that are only available in auto analyse mode\n        UNIFORM: document.getElementById('auto-uniform'),\n        PROGRESSIVE: document.getElementById('auto-progressive'),\n        PROGRESSIVE_MIRROR: document.getElementById('auto-progressive-mirror'),\n        PULSE: document.getElementById('auto-pulse')\n      },\n      autoOptions: {\n        UNIFORM: document.getElementById('auto-uniform-options'),\n        PROGRESSIVE: document.getElementById('auto-progressive-options'),\n        PROGRESSIVE_MIRROR: document.getElementById('auto-progressive-mirror-options'),\n        PULSE: document.getElementById('auto-pulse-options')\n      },\n      globalButtons: {\n        // Buttons that are available in both modes, and that overrides selected effect for given mode\n        STROBOSCOPE: document.getElementById('global-stroboscope'),\n        strobOpts: document.getElementById('strob-opts')\n      },\n      modal: {\n        overlay: document.getElementById('modal-overlay'),\n        stroboscope: {\n          container: document.getElementById('stroboscope-modal'),\n          delay: document.getElementById('strob-delay'),\n          delayText: document.getElementById('strob-delay-value'),\n          color: document.getElementById('strob-color')\n        }\n      }\n    };\n    /*  -------------------------------------  Internal usefull attributes  ------------------------------------------  */\n    // Useful bools and variables\n\n    /** @private\r\n     * @member {boolean} - The state of Light Fever 440 (switched on/off) */\n\n    this._isActive = false;\n    /** @private\r\n     * @member {boolean} - The UI applied theme (either light/dark), see CSS */\n\n    this._isDark = true;\n    /** @private\r\n     * @member {object} - The previous applied effect when global effect is toggled, for proper restoration */\n\n    this._previousEffect = null; // Used with stroboscope bypass\n\n    /** @private\r\n     * @member {string} - The application version number */\n\n    this._version = '0.0.1';\n    /*  ---------------------------  Ajax parametrs (send on each /action POST call)  --------------------------------  */\n\n    /** @private\r\n     * @member {string} - The Light Fever 440 state (either ON/OFF) */\n\n    this._state = 'OFF';\n    /** @private\r\n     * @member {string} - The Light Fever 440 mode (either MANUAL/AUDIO_ANALYSE) */\n\n    this._mode = 'MANUAL';\n    /** @private\r\n     * @member {string} - The Light Fever 440 effect (depends on the selected mode, see <code>README.md</code> for the detailled API) */\n\n    this._effect = 'UNIFORM';\n    /** @private\r\n     * @member {object} - The options to apply to a given effect */\n\n    this._options = null;\n    /*  --------------------------------------  Controller initialization  -------------------------------------------  */\n    // Make UI interactive by listening to user actions\n\n    this._initEvents(); // Init web view from Light Fever 440 state\n\n\n    this._initState();\n  }\n  /*  --------------------------------------------------------------------------------------------------------------- */\n\n  /*  ------------------------------------------  UI INITIALIZATION  -----------------------------------------------  */\n\n  /*  --------------------------------------------------------------------------------------------------------------- */\n\n  /** @method\r\n   * @name _initEvents\r\n   * @private\r\n   * @memberof LightFever440\r\n   * @description <blockquote>Subscribe to all DOM element that can interact with the web server to modify the Light Fever 440\r\n   * state, mode, effect and options. There are also events to control the UI aspect.</blockquote> **/\n\n\n  _createClass(LightFever440, [{\n    key: \"_initEvents\",\n    value: function _initEvents() {\n      this._dom.toggle.addEventListener('click', this._toggleLightFever.bind(this));\n\n      this._dom.manual.addEventListener('click', this._switchMode.bind(this));\n\n      this._dom.analyzer.addEventListener('click', this._switchMode.bind(this));\n\n      this._dom.themeSwitch.addEventListener('click', this._switchTheme.bind(this)); // Listeners for manual effects\n\n\n      this._dom.manualButtons.UNIFORM.addEventListener('click', this._updateEffect.bind(this));\n\n      this._dom.manualButtons.CHASE.addEventListener('click', this._updateEffect.bind(this));\n\n      this._dom.manualButtons.RAINBOW.addEventListener('click', this._updateEffect.bind(this));\n\n      this._dom.manualButtons.CHASE_RAINBOW.addEventListener('click', this._updateEffect.bind(this)); // Listeners for auto analyse effects\n\n\n      this._dom.autoButtons.UNIFORM.addEventListener('click', this._updateEffect.bind(this));\n\n      this._dom.autoButtons.PROGRESSIVE.addEventListener('click', this._updateEffect.bind(this));\n\n      this._dom.autoButtons.PROGRESSIVE_MIRROR.addEventListener('click', this._updateEffect.bind(this));\n\n      this._dom.autoButtons.PULSE.addEventListener('click', this._updateEffect.bind(this)); // Listeners for global effects\n\n\n      this._dom.globalButtons.STROBOSCOPE.addEventListener('touchstart', this._startStroboscope.bind(this));\n\n      this._dom.globalButtons.STROBOSCOPE.addEventListener('touchend', this._stopStroboscope.bind(this));\n\n      this._dom.globalButtons.strobOpts.addEventListener('click', this._strobOptionsModal.bind(this));\n    }\n    /** @method\r\n     * @name _initState\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Retrieve the Light Fever 440 state and apply its parameters to the UI so it matches this state.\r\n     * This is made to update the UI if the LightFever440 was previously launched, to avoid the UI to be inconsistent.</blockquote> **/\n\n  }, {\n    key: \"_initState\",\n    value: function _initState() {\n      var _this = this;\n\n      // Apply theme if saved in local storage\n      var theme = window.localStorage.getItem('theme'); // No need to check for dark theme, as it is the default theme\n\n      if (theme === 'light') {\n        this._isDark = false;\n        document.body.classList.remove('dark-theme');\n        document.body.classList.add('light-theme');\n        this._dom.themeSwitch.checked = true;\n        this._dom.status.innerHTML = 'Switched to light theme';\n      } // Update version number\n\n\n      this._dom.version.innerHTML = this._version; // Perform async call to retrieve LightFever440 state\n\n      this._getState().then(function (response) {\n        _this._dom.status.innerHTML = 'Set Light Fever 440 state'; // No need to check for OFF, as it is the default state\n\n        if (response.state === 'ON') {\n          _this._isActive = true;\n          _this._dom.toggle.innerHTML = 'ON';\n\n          _this._dom.toggle.classList.remove('light-fever-off');\n\n          _this._dom.toggle.classList.add('light-fever-on');\n        } // No need to check manual aswell, as it is the default mode\n\n\n        if (response.mode === 'AUDIO_ANALYSE') {\n          _this._dom.manual.classList.remove('selected');\n\n          _this._dom.analyzer.classList.add('selected');\n\n          _this._dom.selection.style.left = '50%';\n          _this._dom.manualContainer.style.left = '-100%';\n          _this._dom.autoContainer.style.left = '0';\n          _this._mode = 'AUDIO_ANALYSE';\n        } // Same with effect, UNIFORM is the default one\n\n\n        if (response.effect !== 'UNIFORM') {\n          var buttons = {};\n          var options = {}; // Select the buttons object to match the activated mode\n\n          if (_this._mode === 'MANUAL') {\n            buttons = _this._dom.manualButtons;\n            options = _this._dom.manualOptions;\n          } else {\n            buttons = _this._dom.autoButtons;\n            options = _this._dom.autoOptions;\n          } // Unselect all buttons\n\n\n          for (var _i = 0, _Object$entries = Object.entries(buttons); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                key = _Object$entries$_i[0],\n                value = _Object$entries$_i[1];\n\n            buttons[key].classList.remove('selected');\n            options[key].style.display = 'none';\n          } // Update effect toggled\n\n\n          buttons[response.effect].classList.add('selected');\n          options[response.effect].style.display = 'block';\n        } // Save effect in local\n\n\n        _this._effect = response.effect;\n      })[\"catch\"](function (error) {\n        _this._dom.status.innerHTML = 'Unable to load state';\n      });\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  ------------------------------------------  BUTTON INTERACTION  ----------------------------------------------  */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name _toggleLightFever\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Toggle the Light Fever 440 state depending on its previous state. Can be either ON or OFF.</blockquote> **/\n\n  }, {\n    key: \"_toggleLightFever\",\n    value: function _toggleLightFever() {\n      if (this._isActive === false) {\n        this._isActive = true;\n        this._dom.toggle.innerHTML = 'ON';\n\n        this._dom.toggle.classList.remove('light-fever-off');\n\n        this._dom.toggle.classList.add('light-fever-on');\n\n        this._startLightFever();\n      } else {\n        this._isActive = false;\n        this._dom.toggle.innerHTML = 'OFF';\n\n        this._dom.toggle.classList.remove('light-fever-on');\n\n        this._dom.toggle.classList.add('light-fever-off');\n\n        this._stopLightFever();\n      }\n    }\n    /** @method\r\n     * @name _startLightFever\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Explicit method to set the Light Fever 440 state at ON.</blockquote> **/\n\n  }, {\n    key: \"_startLightFever\",\n    value: function _startLightFever() {\n      var _this2 = this;\n\n      this._dom.title.classList.add('activated');\n\n      this._dom.version.classList.add('activated');\n\n      this._state = 'ON';\n\n      this._sendAction().then(function () {\n        _this2._dom.status.innerHTML = 'Light Fever 440 started';\n      })[\"catch\"](function () {\n        _this2._dom.status.innerHTML = 'Unable to start Light Fever 440';\n      });\n    }\n    /** @method\r\n     * @name _stopLightFever\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Explicit method to set the Light Fever 440 state at OFF.</blockquote> **/\n\n  }, {\n    key: \"_stopLightFever\",\n    value: function _stopLightFever() {\n      var _this3 = this;\n\n      this._dom.title.classList.remove('activated');\n\n      this._dom.version.classList.remove('activated');\n\n      this._state = 'OFF';\n\n      this._sendAction().then(function () {\n        _this3._dom.status.innerHTML = 'Light Fever 440 stopped';\n      })[\"catch\"](function () {\n        _this3._dom.status.innerHTML = 'Unable to stop Light Fever 440';\n      });\n    }\n    /** @method\r\n     * @name _switchMode\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Switch the Light Fever 440 in MANUAL or AUTO_ANALYSE mode and update UI accordingly.</blockquote>\r\n     * @param {object} event - The event data (click) to retrieve the event target and update it **/\n\n  }, {\n    key: \"_switchMode\",\n    value: function _switchMode(event) {\n      var _this4 = this;\n\n      if (event.target.dataset.manual === 'false') {\n        this._dom.manual.classList.remove('selected');\n\n        this._dom.analyzer.classList.add('selected');\n\n        this._dom.selection.style.left = '50%';\n        this._dom.manualContainer.style.left = '-100%';\n        this._dom.autoContainer.style.left = '0';\n        this._mode = 'AUDIO_ANALYSE';\n        this._dom.status.innerHTML = 'Audio analyzer activated'; // Find selected effect in destination mode\n\n        for (var _i2 = 0, _Object$entries2 = Object.entries(this._dom.autoButtons); _i2 < _Object$entries2.length; _i2++) {\n          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n              key = _Object$entries2$_i[0],\n              value = _Object$entries2$_i[1];\n\n          if (this._dom.autoButtons[key].classList.contains('selected')) {\n            this._effect = this._dom.autoButtons[key].dataset.effect;\n            this._dom.autoOptions[key].style.display = 'block';\n            break;\n          }\n        }\n      } else {\n        this._dom.analyzer.classList.remove('selected');\n\n        this._dom.manual.classList.add('selected');\n\n        this._dom.selection.style.left = '0';\n        this._dom.manualContainer.style.left = '0';\n        this._dom.autoContainer.style.left = '100%';\n        this._mode = 'MANUAL';\n        this._dom.status.innerHTML = 'Manual control activated'; // Find selected effect in destination mode\n\n        for (var _i3 = 0, _Object$entries3 = Object.entries(this._dom.manualButtons); _i3 < _Object$entries3.length; _i3++) {\n          var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2),\n              _key = _Object$entries3$_i[0],\n              _value = _Object$entries3$_i[1];\n\n          if (this._dom.manualButtons[_key].classList.contains('selected')) {\n            this._effect = this._dom.manualButtons[_key].dataset.effect;\n            this._dom.manualOptions[_key].style.display = 'block';\n            break;\n          }\n        }\n      } // Update light fever script with new internals\n\n\n      this._sendAction().then(function () {\n        _this4._dom.status.innerHTML = \"Switched to mode \".concat(_this4._mode);\n      })[\"catch\"](function () {\n        _this4._dom.status.innerHTML = 'Unable to switch mode';\n      });\n    }\n    /** @method\r\n     * @name _updateEffect\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Switch the Light Fever 440 effect using the HTML data-effect set on each of the concerned buttons.\r\n     * See <code>README.md</code> for the detailled API description.</blockquote>\r\n     * @param {object} event - The event data (click) to retrieve the event target and update it **/\n\n  }, {\n    key: \"_updateEffect\",\n    value: function _updateEffect(event) {\n      var _this5 = this;\n\n      // First we unselect all buttons\n      var buttons = {};\n      var options = {};\n\n      if (this._mode === 'MANUAL') {\n        buttons = this._dom.manualButtons;\n        options = this._dom.manualOptions;\n      } else {\n        buttons = this._dom.autoButtons;\n        options = this._dom.autoOptions;\n      } // Unselect all buttons\n\n\n      for (var _i4 = 0, _Object$entries4 = Object.entries(buttons); _i4 < _Object$entries4.length; _i4++) {\n        var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i4], 2),\n            key = _Object$entries4$_i[0],\n            value = _Object$entries4$_i[1];\n\n        buttons[key].classList.remove('selected');\n        options[key].style.display = 'none';\n      } // Then use target as current selection\n\n\n      event.target.classList.add('selected');\n      this._effect = event.target.dataset.effect;\n      options[this._effect].style.display = 'block';\n\n      this._sendAction().then(function () {\n        _this5._dom.status.innerHTML = \"Effect \".concat(_this5._effect, \" activated\");\n      })[\"catch\"](function () {\n        _this5._dom.status.innerHTML = \"Unable to set effect \".concat(_this5._effect);\n      });\n    }\n    /** @method\r\n     * @name _startStroboscope\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Explicit method to start the global stroboscope effect. It will override any selected effect and\r\n     * will be active while the user hold the button. On release, the previous selected effect is restored.</blockquote>\r\n     * @param {object} event - The event data (touchdown) to avoid default behavior on hold (ctx menu) **/\n\n  }, {\n    key: \"_startStroboscope\",\n    value: function _startStroboscope(event) {\n      var _this6 = this;\n\n      if (event.target.id === 'global-stroboscope') {\n        event.preventDefault(); // Avoid context to open when keeping touch down\n\n        this._previousEffect = this._effect;\n\n        this._dom.globalButtons.STROBOSCOPE.classList.add('selected');\n\n        this._effect = 'STROBOSCOPE';\n\n        this._sendAction().then(function () {\n          _this6._dom.status.innerHTML = 'Stroboscope activated';\n        })[\"catch\"](function () {\n          _this6._dom.status.innerHTML = 'Unable to start stroboscope';\n        });\n      }\n    }\n    /** @method\r\n     * @name _stopStroboscope\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Explicit method to stop the global stroboscope effect. Called when the button is released,\r\n     * the previous selected effect will be restored.</blockquote> **/\n\n  }, {\n    key: \"_stopStroboscope\",\n    value: function _stopStroboscope() {\n      var _this7 = this;\n\n      this._effect = this._previousEffect;\n      this._previousEffect = null;\n\n      this._dom.globalButtons.STROBOSCOPE.classList.remove('selected');\n\n      this._sendAction().then(function () {\n        _this7._dom.status.innerHTML = 'Stroboscope deactivated';\n      })[\"catch\"](function () {\n        _this7._dom.status.innerHTML = 'Unable to stop stroboscope';\n      });\n    }\n    /** @method\r\n     * @name _setOptionsForEffect\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Internal method to be called before any sendAction for a given effect. It will send options that are\r\n     * related to the selected effect, and use the inputs values that matches the effect.</blockquote> **/\n\n  }, {\n    key: \"_setOptionsForEffect\",\n    value: function _setOptionsForEffect() {\n      if (this._effect === 'UNIFORM') {\n        this._options = {\n          color: [255, 255, 255]\n        };\n      } else if (this._effect === 'CHASE') {\n        this._options = {\n          color: [255, 255, 255],\n          delay: 50 // ms\n\n        };\n      } else if (this._effect === 'STROBOSCOPE') {\n        this._options = {\n          color: this._hexToRgb(this._dom.modal.stroboscope.color.value),\n          delay: parseInt(this._dom.modal.stroboscope.delay.value) || 50 // ms\n\n        };\n      }\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  ------------------------------------------  FRONT ONLY METHODS  ----------------------------------------------  */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name _switchTheme\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Switch the UI theme between light or dark theme. Those are defined in the CSS file. This value\r\n     * is stored in the local storage, to be restored when the user opens a new session.</blockquote>\r\n     * @param {object} event - The event data (click) to retrieve the event target and update it **/\n\n  }, {\n    key: \"_switchTheme\",\n    value: function _switchTheme(event) {\n      if (event.target.checked === true) {\n        this._isDark = false;\n        document.body.classList.remove('dark-theme');\n        document.body.classList.add('light-theme');\n        this._dom.status.innerHTML = 'Switched to light theme';\n        window.localStorage.setItem('theme', 'light');\n      } else {\n        this._isDark = true;\n        document.body.classList.remove('light-theme');\n        document.body.classList.add('dark-theme');\n        this._dom.status.innerHTML = 'Switched to dark theme';\n        window.localStorage.setItem('theme', 'dark');\n      }\n    }\n    /** @method\r\n     * @name _strobOptionsModal\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Open the stroboscope options modal and handle its interactivity (the whole lifecycle).</blockquote> **/\n\n  }, {\n    key: \"_strobOptionsModal\",\n    value: function _strobOptionsModal() {\n      var _this8 = this;\n\n      // Make modal visible\n      this._dom.modal.overlay.classList.add('visible');\n\n      this._dom.modal.stroboscope.container.classList.add('visible'); // Update range\n\n\n      var range = function range(event) {\n        _this8._dom.modal.stroboscope.delayText.innerHTML = event.target.value;\n        window.localStorage.setItem('strob-delay', event.target.value);\n      }; // Update color\n\n\n      var color = function color(event) {\n        _this8._dom.modal.stroboscope.color.value = event.target.value;\n        window.localStorage.setItem('strob-color', event.target.value);\n      }; // Close modal internal metohd\n\n\n      var _close = function close(event) {\n        if (event.target.id === 'strob-modal-close' || event.target.id === 'modal-overlay') {\n          _this8._dom.modal.overlay.classList.remove('visible');\n\n          _this8._dom.modal.stroboscope.container.classList.remove('visible');\n\n          _this8._dom.modal.stroboscope.delay.removeEventListener('click', range);\n\n          _this8._dom.modal.stroboscope.color.removeEventListener('input', color);\n\n          _this8._dom.modal.overlay.removeEventListener('click', _close);\n\n          document.getElementById('strob-modal-close').removeEventListener('click', _close);\n        }\n      }; // Binding now to be able to remove events properly\n\n\n      range = range.bind(this);\n      color = color.bind(this);\n      _close = _close.bind(this);\n      this._dom.modal.stroboscope.color.value = window.localStorage.getItem('strob-color') || '#FFFFFF'; // Using range slider to make input range touch friendly\n\n      rangesliderJs.create(this._dom.modal.stroboscope.delay, {\n        value: window.localStorage.getItem('strob-delay') || '50'\n      }); // Event listeners for modal\n\n      this._dom.modal.stroboscope.delay.addEventListener('input', range);\n\n      this._dom.modal.stroboscope.color.addEventListener('input', color);\n\n      this._dom.modal.overlay.addEventListener('click', _close);\n\n      document.getElementById('strob-modal-close').addEventListener('click', _close);\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  ------------------------------------------  SERVER CALLS UTILS  ----------------------------------------------  */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name _getState\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>This method will perform a GET call to the Py web server, to retrieve the activated mode, effect and\r\n     * options, in order to initialize the UI accordingly.</blockquote>\r\n     * @returns {promise} The request <code>Promise</code>, format response as JSON on resolve, as error code string on reject **/\n\n  }, {\n    key: \"_getState\",\n    value: function _getState() {\n      var _this9 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this9._ajax('state').then(resolve)[\"catch\"](reject);\n      });\n    }\n    /** @method\r\n     * @name _sendAction\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>This method will perform a POST call to the Py web server, to update the Light Fever 440 mode, effect\r\n     * and options, so it matches the UI state.</blockquote>\r\n     * @returns {promise} The request <code>Promise</code>, format response as JSON on resolve, as error code string on reject **/\n\n  }, {\n    key: \"_sendAction\",\n    value: function _sendAction() {\n      var _this10 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this10._setOptionsForEffect(); // Always update the option object before calling <code>action</code>\n\n\n        _this10._ajax('action', {\n          state: _this10._state,\n          mode: _this10._mode,\n          effect: _this10._effect,\n          options: _this10._options\n        }).then(resolve)[\"catch\"](reject)[\"finally\"](function () {\n          _this10._options = null;\n        }); // Restore option to null after call\n\n      });\n    }\n    /** @method\r\n     * @name _ajax\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Server call abstraction method that will dispatch a GET or a POST request to\r\n     * the server, depending on the given parameters. It covers both the _getState and the _sendAction method.</blockquote>\r\n     * @param {string} url - The url to reach, either <code>state</code> (GET) or <code>action</code> (POST)\r\n     * @param {object} data - The data to attach to the <code>action</code> calls. No required for <code>state</code> call\r\n     * @returns {promise} The request <code>Promise</code>, format response as JSON on resolve, as error code string on reject **/\n\n  }, {\n    key: \"_ajax\",\n    value: function _ajax(url, data) {\n      return new Promise(function (resolve, reject) {\n        // Prepare sent options with proper verb, headers and body (for POST only)\n        var options = {\n          method: data ? 'POST' : 'GET',\n          headers: new Headers([['Content-Type', 'application/json; charset=UTF-8'], ['Accept', 'application/json']]),\n          body: JSON.stringify(data)\n        }; // Perform fetch call and handle its output\n\n        fetch(url, options).then(function (response) {\n          if (response) {\n            if (response.ok) {\n              resolve(response.json());\n            } else {\n              reject(\"ERROR_\".concat(response.status));\n            }\n          } else {\n            reject('ERROR_MISSING_ARGUMENT');\n          }\n        })[\"catch\"](reject);\n      });\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  ---------------------------------------------  GLOBAL UTILS  -------------------------------------------------  */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name _hexToRgb\r\n     * @private\r\n     * @memberof LightFever440\r\n     * @description <blockquote>Useful method to convert hexadecimal string into a RGB array of numbers.</blockquote>\r\n     * @param {string} hex - The hexadecimal string to convert in RGB\r\n     * @return {number[]} - The converted RGB array **/\n\n  }, {\n    key: \"_hexToRgb\",\n    value: function _hexToRgb(hex) {\n      // Real MV : https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb/5624139#5624139\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : [255, 255, 255];\n    }\n  }]);\n\n  return LightFever440;\n}();\n\nwindow.LF440 = new LightFever440(); // Instantiate a controller here to avoid any additionnal code in HTML markup\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LightFever440); // Default module export\n\n//# sourceURL=webpack://LightFever440/./js/LightFever440.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./js/LightFever440.js");
/******/ })()
.default;